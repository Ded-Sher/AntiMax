import os
import asyncio
import discord
from discord.ext import commands
from config import Config
import logging
import cProfile
import pstats
import concurrent.futures

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç–∏ –¥–ª—è numpy
os.environ["OMP_NUM_THREADS"] = "4"
os.environ["MKL_NUM_THREADS"] = "4"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

intents = discord.Intents.default()
intents.members = True      # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
intents.message_content = True  # –î–ª—è —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
intents.voice_states = True  # –î–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–æ–≤

class MyBot(commands.Bot):
    def __init__(self):
        super().__init__(
            command_prefix=Config.PREFIX,
            intents=intents,
            activity=discord.Game(name="–ú–æ–¥–µ—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞")
        )
        self.executor = concurrent.futures.ThreadPoolExecutor(max_workers=4)
        self.allowed_channel_id = Config.ALLOWED_CHANNEL_ID
        self.required_role = "–ì–µ–Ω—Å–µ–∫"

    async def setup_hook(self):
        await self.load_extension('cogs.roles')
        await self.load_extension('cogs.voice')
        await self.load_extension('cogs.security')
        await self.load_extension('cogs.moderation')
        print("‚úÖ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    async def check_permissions(self, message):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–Ω–∞–ª–∞
        if message.channel.id != self.allowed_channel_id:
            return False  # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω–æ–º –∫–∞–Ω–∞–ª–µ
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–µ—Ä–∞)
        if isinstance(message.author, discord.Member):
            return any(role.name.lower() == self.required_role.lower() 
                     for role in message.author.roles)
        return False  # –ù–µ —É—á–∞—Å—Ç–Ω–∏–∫ —Å–µ—Ä–≤–µ—Ä–∞ –∏–ª–∏ –Ω–µ—Ç —Ä–æ–ª–∏

async def main():
    bot = MyBot()  # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    try:
        print("üîπ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        await bot.start(Config.TOKEN)
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        if not bot.is_closed():
            await bot.close()

def run_bot():
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    try:
        loop.run_until_complete(main())
    finally:
        loop.close()

if __name__ == '__main__':
    print("üîπ –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞")
    try:
        with cProfile.Profile() as pr:  # –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
            run_bot()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    except KeyboardInterrupt:
        print("\nüîπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        # –ê–Ω–∞–ª–∏–∑ –∏ –≤—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        stats = pstats.Stats(pr)
        stats.sort_stats(pstats.SortKey.TIME)
        print("\nüîπ –ü—Ä–æ—Ñ–∏–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:")
        stats.print_stats(20)
        print("üîπ –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É")