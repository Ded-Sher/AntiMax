import discord
from discord.ext import commands
from config import Config
from datetime import datetime
import asyncio
import speech_recognition as sr
import logging
import io
import re
from utils.audio import AudioAnalyzer

class VoiceSecurity(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.recognizer = sr.Recognizer()
        self.audio_analyzer = AudioAnalyzer()
        self.user_violations = {}
        self.user_phrases = {}
        self.last_phrase_time = {}
        self.processing_active = True
        self.word_pattern = re.compile(r'\w+', re.UNICODE)
        print("üîπ –ú–æ–¥—É–ª—å –≥–æ–ª–æ—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
    async def cog_load(self):
        self.audio_analyzer.start()
        self.bot.loop.create_task(self.continuous_audio_processing())
        print("üîπ –ê—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω")
        
    async def continuous_audio_processing(self):
        print("üîπ –ù–∞—á–∞—Ç–æ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–µ –∞—É–¥–∏–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ")
        while self.processing_active:
            try:
                audio_data = await self._get_audio_data()
                if audio_data:
                    await self._process_audio(audio_data)
                await asyncio.sleep(0.2)
            except Exception as e:
                error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}"
                print(error_msg)
                logging.error(error_msg)
                await asyncio.sleep(1)

    async def _get_audio_data(self):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∞—É–¥–∏–æ–¥–∞–Ω–Ω—ã—Ö
        loop = asyncio.get_running_loop()
        return await loop.run_in_executor(
            self.bot.executor,
            self.audio_analyzer.get_audio_data,
            2.0
        )

    async def _process_audio(self, audio_data):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ—Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞
        try:
            loop = asyncio.get_running_loop()
            text = await loop.run_in_executor(
                self.bot.executor,
                self._recognize_speech,
                audio_data
            )
            
            if text:
                await self._process_text(text)
                
        except sr.UnknownValueError:
            pass  # –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ —Ä–µ—á—å - –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è
        except sr.RequestError as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}"
            print(error_msg)
            logging.error(error_msg)
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}"
            print(error_msg)
            logging.error(error_msg)

    def _recognize_speech(self, audio_data):
        # –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏
        with io.BytesIO(audio_data) as audio_file:
            with sr.AudioFile(audio_file) as source:
                audio = self.recognizer.record(source)
                return self.recognizer.recognize_google(audio, language="ru-RU").lower()

    async def _process_text(self, text):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        if not self.bot.voice_clients:
            return
            
        voice_channel = self.bot.voice_clients[0].channel
        active_user = self._get_most_active_user(voice_channel)
        if not active_user:
            return
        
        current_time = datetime.now().timestamp()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É
        if current_time - self.last_phrase_time.get(active_user.id, 0) > Config.PHRASE_TIMEOUT:
            self.user_phrases[active_user.id] = []
        
        self.user_phrases[active_user.id].append(text)
        self.last_phrase_time[active_user.id] = current_time
        
        full_phrase = " ".join(self.user_phrases[active_user.id])
        spoken_words = self.word_pattern.findall(full_phrase)
        found_banned_words = set(spoken_words) & set(BAN_WORDS)
        
        if found_banned_words:
            await self._handle_violation(active_user, next(iter(found_banned_words)))

    def _get_most_active_user(self, voice_channel):
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∞–º–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        active_members = [m for m in voice_channel.members 
                         if not m.bot and m.voice and not m.voice.self_mute and not m.voice.self_deaf]
        
        if not active_members:
            return None
            
        active_members.sort(
            key=lambda m: self.last_phrase_time.get(m.id, 0),
            reverse=True
        )
        return active_members[0]

    async def _handle_violation(self, user, banned_word):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        self.user_violations[user.id] = self.user_violations.get(user.id, 0) + 1
        violations = self.user_violations[user.id]
        
        log_msg = f'‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –ø—Ä–æ–∏–∑–Ω—ë—Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ "{banned_word}" (–Ω–∞—Ä—É—à–µ–Ω–∏–µ {violations}/{Config.MAX_BAN_WORDS})'
        print(log_msg)
        logging.info(log_msg)
        
        self.user_phrases[user.id] = []
        
        if violations >= Config.MAX_BAN_WORDS:
            await self._punish_user(user, banned_word)
        else:
            channel = self.bot.get_channel(Config.ALLOWED_CHANNEL_ID)
            if channel:
                try:
                    await channel.send(f"‚ö† {user.mention}, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞! –ù–∞—Ä—É—à–µ–Ω–∏–µ {violations}/{Config.MAX_BAN_WORDS}")
                except discord.Forbidden:
                    error_msg = f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª {Config.ALLOWED_CHANNEL_ID}"
                    print(error_msg)
                    logging.error(error_msg)

    async def _punish_user(self, user, banned_word):
        # –ù–∞–∫–∞–∑–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            if not user.guild.me.guild_permissions.ban_members:
                error_msg = "‚ùå –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!"
                print(error_msg)
                logging.error(error_msg)
                channel = self.bot.get_channel(Config.ALLOWED_CHANNEL_ID)
                if channel:
                    await channel.send(f"‚ùå –£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –∑–∞–±–∞–Ω–∏—Ç—å {user.mention} –∑–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª!")
                return
                
            await user.ban(reason=f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±–∞–Ω –∑–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: {banned_word}", delete_message_days=0)
            self.user_violations.pop(user.id, None)
            
            log_msg = f"‚õî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤"
            print(log_msg)
            logging.info(log_msg)
            
            channel = self.bot.get_channel(Config.ALLOWED_CHANNEL_ID)
            if channel:
                await channel.send(f"‚õî {user.mention} –ø–æ–ª—É—á–∏–ª –±–∞–Ω –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.")
            
            await asyncio.sleep(300)
            try:
                await user.guild.unban(user)
                log_msg = f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.name} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω"
                print(log_msg)
                logging.info(log_msg)
                if channel:
                    await channel.send(f"‚úÖ {user.name} –±—ã–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω.")
            except discord.Forbidden:
                error_msg = f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–∞–∑–±–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}"
                print(error_msg)
                logging.error(error_msg)
                if channel:
                    await channel.send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–±–∞–Ω–∏—Ç—å {user.name} - –Ω–µ—Ç –ø—Ä–∞–≤!")
            
        except discord.Forbidden:
            error_msg = f"‚ùå –ù–µ—Ç –ø—Ä–∞–≤ –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}"
            print(error_msg)
            logging.error(error_msg)
            channel = self.bot.get_channel(Config.ALLOWED_CHANNEL_ID)
            if channel:
                await channel.send(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å {user.mention} - –Ω–µ—Ç –ø—Ä–∞–≤!")
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.name}: {e}"
            print(error_msg)
            logging.error(error_msg)

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if member.bot:
            return
            
        if after.channel and (not after.self_mute and not after.self_deaf):
            self.last_phrase_time[member.id] = datetime.now().timestamp()

    async def cog_unload(self):
        # –í—ã–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è
        self.processing_active = False
        self.audio_analyzer.stop()
        print("üîπ –ú–æ–¥—É–ª—å –≥–æ–ª–æ—Å–æ–≤–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤—ã–≥—Ä—É–∂–µ–Ω")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤
try:
    with open('ban_words.txt', 'r', encoding='utf-8') as f:
        BAN_WORDS = {word.strip().lower() for word in f.readlines() if word.strip()}
    print(f"üîπ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(BAN_WORDS)} –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤")
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(BAN_WORDS)} –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤")
except FileNotFoundError:
    error_msg = "‚ùå –§–∞–π–ª ban_words.txt –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤."
    print(error_msg)
    logging.error(error_msg)
    BAN_WORDS = set()

async def setup(bot):
    await bot.add_cog(VoiceSecurity(bot))