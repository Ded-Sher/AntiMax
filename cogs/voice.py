import discord
from discord.ext import commands
from config import Config
from datetime import datetime, timedelta
import asyncio
import logging
import numpy as np
from utils.audio import AudioAnalyzer

class VoiceMod(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.voice_client = None
        self.user_data = {}  # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        self.mute_tasks = {}  # –î–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–Ω—è—Ç–∏—è –º—É—Ç–∞
        self.last_mute_time = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º—É—Ç–∞
        self.last_print_time = {}
        self.CHECK_INTERVAL = 0.5
        self.MAX_DECIBEL = Config.MAX_DECIBEL
        self.MUTE_DURATION = Config.MUTE_DURATION
        self.DB_CALIBRATION = Config.DB_CALIBRATION
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É !help
        if self.bot.help_command:
            self.bot.help_command = None
        
        # –°–ª–æ–≤–∞—Ä—å –∫–æ–º–∞–Ω–¥ –∏ –∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        self.commands = {
            "help": self.cmd_help,
            "status": self.cmd_status,
            "set_threshold": self.cmd_set_threshold,
            "set_duration": self.cmd_set_duration,
            "set_calibration": self.cmd_set_calibration,
            "join": self.cmd_join,
            "leave": self.cmd_leave,
        }
        
        print("üîπ –ú–æ–¥—É–ª—å –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")

    async def process_command(self, ctx, command, args):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å
        if command not in self.commands:
            return False
            
        if not await self.bot.check_permissions(ctx.message):
            await ctx.send("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.", delete_after=5.0)
            return True
            
        await self.commands[command](ctx, args)
        return True

    async def cmd_help(self, ctx, args):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
        help_text = """
        **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –ì–µ–Ω—Å–µ–∫–æ–≤):**
        `!help` ‚Äì –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
        `!status` ‚Äì –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        `!join [ID_–∫–∞–Ω–∞–ª–∞]` ‚Äì –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –±–æ—Ç–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª
        `!leave` ‚Äì –û—Ç–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        `!set_threshold <–∑–Ω–∞—á–µ–Ω–∏–µ>` ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ (dB)
        `!set_duration <—Å–µ–∫—É–Ω–¥—ã>` ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞
        `!set_calibration <–∑–Ω–∞—á–µ–Ω–∏–µ>` ‚Äì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ (dB)
        `!mute <@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å>` ‚Äì –ó–∞–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
        `!unmute <@–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å>` ‚Äì –†–∞–∑–º—å—é—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –∫–∞–Ω–∞–ª–∞—Ö
        """
        await ctx.send(help_text)

    async def cmd_status(self, ctx, args):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        status_msg = (
            f"**–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**\n"
            f"‚Ä¢ –ü–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏: {self.MAX_DECIBEL} dB\n"
            f"‚Ä¢ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞: {self.MUTE_DURATION} —Å–µ–∫\n"
            f"‚Ä¢ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: {self.DB_CALIBRATION} dB\n"
            f"‚Ä¢ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞: {self.voice_client.channel.name if self.voice_client else '–ù–µ –∞–∫—Ç–∏–≤–µ–Ω'}"
        )
        await ctx.send(status_msg)

    async def cmd_set_threshold(self, ctx, args):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        try:
            value = float(args[0])
            Config.MAX_DECIBEL = value
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤ –∞—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ
            if hasattr(self.bot, 'audio_analyzer'):
                self.bot.audio_analyzer.threshold = value
            
            await ctx.send(f"‚úÖ –ü–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {value} dB")
            print(f"üîπ –ü–æ—Ä–æ–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {value} dB –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {ctx.author}")
        except (IndexError, ValueError):
            await ctx.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!set_threshold <–∑–Ω–∞—á–µ–Ω–∏–µ>`")

    async def cmd_set_duration(self, ctx, args):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞
        try:
            seconds = int(args[0])
            Config.MUTE_DURATION = seconds
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤ –º–æ–¥—É–ª–µ –≥–æ–ª–æ—Å–æ–≤–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            if hasattr(self.bot, 'voice_mod'):
                self.bot.voice_mod.MUTE_DURATION = seconds
            
            await ctx.send(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {seconds} —Å–µ–∫")
            print(f"üîπ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {seconds} —Å–µ–∫ –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {ctx.author}")
        except (IndexError, ValueError):
            await ctx.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!set_duration <—Å–µ–∫—É–Ω–¥—ã>`")

    async def cmd_set_calibration(self, ctx, args):
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
        try:
            value = float(args[0])
            Config.DB_CALIBRATION = value
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤ –∞—É–¥–∏–æ–∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–µ
            if hasattr(self.bot, 'audio_analyzer'):
                self.bot.audio_analyzer.calibration = value
            
            await ctx.send(f"‚úÖ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ {value} dB")
            print(f"üîπ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {value} dB –ø–æ –∫–æ–º–∞–Ω–¥–µ –æ—Ç {ctx.author}")
        except (IndexError, ValueError):
            await ctx.send("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `!set_calibration <–∑–Ω–∞—á–µ–Ω–∏–µ>`")

    async def cmd_join(self, ctx, args):
        # –ü–æ–¥–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
        target_channel = None
        
        if args:
            try:
                channel_id = int(args[0])
                target_channel = self.bot.get_channel(channel_id)
                if not target_channel or not isinstance(target_channel, discord.VoiceChannel):
                    await ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
                    return
            except ValueError:
                await ctx.send("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∫–∞–Ω–∞–ª–∞. –ü—Ä–∏–º–µ—Ä: `!join 123456789`")
                return
        else:
            if not ctx.author.voice or not ctx.author.voice.channel:
                await ctx.send("‚ùå –í—ã –Ω–µ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ. –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –∑–∞–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª")
                return
            target_channel = ctx.author.voice.channel
            
        if self.voice_client and self.voice_client.is_connected():
            if self.voice_client.channel == target_channel:
                await ctx.send("‚ÑπÔ∏è –ë–æ—Ç —É–∂–µ –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ")
                return
            await self.voice_client.move_to(target_channel)
            await ctx.send(f"‚úÖ –ü–µ—Ä–µ–º–µ—â—ë–Ω –≤ {target_channel.name}")
            return
            
        self.voice_client = await target_channel.connect()
        await ctx.send(f"‚úÖ –ü–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ {target_channel.name}")
        self.bot.loop.create_task(self.monitor_voice_activity())
        print(f"üîπ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É {target_channel.name}")

    async def cmd_leave(self, ctx, args):
        # –û—Ç–∫–ª—é—á–∞–µ—Ç –±–æ—Ç–∞ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        if not self.voice_client or not self.voice_client.is_connected():
            await ctx.send("‚ÑπÔ∏è –ë–æ—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É")
            return

        await self.voice_client.disconnect()
        self.voice_client = None
        await ctx.send("‚úÖ –ë–æ—Ç –æ—Ç–∫–ª—é—á—ë–Ω –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
        print("üîπ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")

    @commands.Cog.listener()
    async def on_message(self, message):
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–º–∞–Ω–¥
        if message.author.bot or not message.content.startswith('!'):
            return

        parts = message.content.split()
        command = parts[0][1:].lower()
        args = parts[1:] if len(parts) > 1 else []

        await self.process_command(await self.bot.get_context(message), command, args)
        
# –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ ===
    async def monitor_voice_activity(self):
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≥—Ä–æ–º–∫–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        while self.voice_client and self.voice_client.is_connected():
            try:
                current_time = datetime.now()
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º—É—Ç –∑–∞ –≥—Ä–æ–º–∫–æ—Å—Ç—å
                for member in self.voice_client.channel.members:
                    if member.bot or member.voice.deaf or member.voice.mute:
                        continue
                    
                    await self.process_member_volume(member, current_time)
                
                await self.cleanup_inactive_users()
                await asyncio.sleep(self.CHECK_INTERVAL)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(5)

    async def process_member_volume(self, member, current_time):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥—Ä–æ–º–∫–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if member.id not in self.user_data:
            self.user_data[member.id] = {
                'analyzer': AudioAnalyzer(),
                'member': member,
                'last_update': current_time,
                'is_muted': False
            }
            self.user_data[member.id]['analyzer'].start()
        
        user = self.user_data[member.id]
        user['last_update'] = current_time
        
        volume = await self._calculate_volume(user)
        await self._check_volume_threshold(user, volume, current_time)

    async def _calculate_volume(self, user_data):
        # –†–∞—Å—á—ë—Ç –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        loop = asyncio.get_running_loop()
        return await loop.run_in_executor(
            self.bot.executor,
            user_data['analyzer'].calculate_volume
        )

    async def _check_volume_threshold(self, user_data, volume, current_time):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞ –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        if (volume > Config.MAX_DECIBEL and 
            not user_data['is_muted'] and 
            (user_data['member'].id not in self.last_mute_time or 
             (current_time - self.last_mute_time[user_data['member'].id]).total_seconds() > Config.MUTE_DURATION)):
            
            await self.apply_mute(user_data, volume)

    async def apply_mute(self, user_data, volume):
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º—É—Ç–∞
        try:
            member = user_data['member']
            await member.edit(mute=True)
            user_data['is_muted'] = True
            self.last_mute_time[member.id] = datetime.now()
            
            msg = f"‚ö†Ô∏è –ú–£–¢: {member.display_name} ({volume:.1f} dB > {Config.MAX_DECIBEL} dB)"
            print(msg)
            logging.info(msg)
            
            channel = self.bot.get_channel(Config.LOG_CHANNEL_ID)
            if channel:
                embed = discord.Embed(
                    title="üîä –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –≥—Ä–æ–º–∫–æ—Å—Ç–∏",
                    description=f"{member.mention} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω",
                    color=discord.Color.red()
                )
                embed.add_field(name="–°—Ä–µ–¥–Ω—è—è –≥—Ä–æ–º–∫–æ—Å—Ç—å", value=f"{volume:.1f} dB")
                embed.add_field(name="–ü–æ—Ä–æ–≥", value=f"{Config.MAX_DECIBEL} dB")
                await channel.send(embed=embed)

            self.mute_tasks[member.id] = self.bot.loop.create_task(
                self.remove_mute_after_delay(user_data))
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –º—É—Ç–∞ {user_data['member'].display_name}: {e}"
            print(error_msg)
            logging.error(error_msg)

    async def remove_mute_after_delay(self, user_data):
        # –°–Ω—è—Ç–∏–µ –º—É—Ç–∞ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        await asyncio.sleep(Config.MUTE_DURATION)
        try:
            member = user_data['member']
            await member.edit(mute=False)
            user_data['is_muted'] = False
            user_data['analyzer'].reset_history()
            
            msg = f"üîá –°–Ω—è—Ç–∏–µ –º—É—Ç–∞: {member.display_name}"
            print(msg)
            logging.info(msg)
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –º—É—Ç–∞ {user_data['member'].display_name}: {e}"
            print(error_msg)
            logging.error(error_msg)
        finally:
            if member.id in self.mute_tasks:
                del self.mute_tasks[member.id]

    async def cleanup_inactive_users(self):
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        current_time = datetime.now()
        inactive_users = [
            uid for uid, data in self.user_data.items()
            if (current_time - data['last_update']) > timedelta(seconds=10)
            and not data['is_muted']
        ]
        
        for uid in inactive_users:
            if uid in self.mute_tasks:
                self.mute_tasks[uid].cancel()
                del self.mute_tasks[uid]
            
            self.user_data[uid]['analyzer'].stop()
            del self.user_data[uid]

    @commands.Cog.listener()
    async def on_voice_state_update(self, member, before, after):
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if member.bot:
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—É—Ç–∞
        if before.channel and not after.channel:
            if member.id in self.user_data:
                if member.id in self.mute_tasks:
                    self.mute_tasks[member.id].cancel()
                    del self.mute_tasks[member.id]
                self.user_data[member.id]['analyzer'].stop()
                del self.user_data[member.id]

async def setup(bot):
    await bot.add_cog(VoiceMod(bot))